
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R é um software livre e vem sem GARANTIA ALGUMA.
Você pode redistribuí-lo sob certas circunstâncias.
Digite 'license()' ou 'licence()' para detalhes de distribuição.

R é um projeto colaborativo com muitos contribuidores.
Digite 'contributors()' para obter mais informações e
'citation()' para saber como citar o R ou pacotes do R em publicações.

Digite 'demo()' para demonstrações, 'help()' para o sistema on-line de ajuda,
ou 'help.start()' para abrir o sistema de ajuda em HTML no seu navegador.
Digite 'q()' para sair do R.

> require(rethinking)
Carregando pacotes exigidos: rethinking
Carregando pacotes exigidos: rstan
Carregando pacotes exigidos: StanHeaders
Carregando pacotes exigidos: ggplot2
rstan (Version 2.21.7, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)
Carregando pacotes exigidos: cmdstanr
This is cmdstanr version 0.5.3
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/silenus/.cmdstan/cmdstan-2.30.1
- CmdStan version: 2.30.1

A newer version of CmdStan is available. See ?install_cmdstan() to install it.
To disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.
Carregando pacotes exigidos: parallel
rethinking (Version 2.21)

Attaching package: ‘rethinking’

The following object is masked from ‘package:rstan’:

    stan

The following object is masked from ‘package:stats’:

    rstudent

> require(tidyverse)
Carregando pacotes exigidos: tidyverse
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
✔ tibble  3.1.8      ✔ dplyr   1.0.10
✔ tidyr   1.2.1      ✔ stringr 1.4.1 
✔ readr   2.1.2      ✔ forcats 0.5.2 
✔ purrr   0.3.4      
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ tidyr::extract() masks rstan::extract()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ purrr::map()     masks rethinking::map()
> 
> # ## Exercice 1:
> # Suppose the globe tossing data (Lecture 2, Chapter 2) had turned out to be 4
> # water and 11 land. Construct the posterior distribution.
> 
> grid_approximation_pW <- function(W, L, size) {
+     N <- W + L
+     p_grid <- seq(from = 0, to = 1, length.out = size)
+     prior <- rep(1, size)
+     likelihood <- dbinom(W, size = N, prob = p_grid)
+     unstd_post <- likelihood * prior
+     posterior <- unstd_post / sum(unstd_post)
+     tibble(p = p_grid, post = posterior)
+ }
> 
> size <- 100
> W <- 4
> L <- 11
> 
> model <- grid_approximation_pW(W, L, size)
> model
# A tibble: 100 × 2
        p       post
    <dbl>      <dbl>
 1 0      0         
 2 0.0101 0.00000205
 3 0.0202 0.0000294 
 4 0.0303 0.000133  
 5 0.0404 0.000373  
 6 0.0505 0.000812  
 7 0.0606 0.00150   
 8 0.0707 0.00246   
 9 0.0808 0.00372   
10 0.0909 0.00528   
# … with 90 more rows
> 
> model %>%
+   ggplot(aes(x = p, y = post)) +
+   geom_line() + geom_point() +
+   xlab("probability of water") +
+   ylab("posterior probability") +
+   labs(subtitle = str_c(as.character(size), " examples"))
> 
> # ## Exercice 2: Using the posterior distribution from 1, compute the posterior
> # predictive distribution for the next 5 tosses of the same globe. I recommend
> # you use the sampling method.
> 
> n_simulations <- 1e4
> sample_size <- 5
> p_grid <- seq(from = 0, to = 1, length.out = size)
> 
> post_samples <- sample(
+    p_grid,
+    size = n_simulations,
+    replace = TRUE,
+    prob = model$post
+ )
> 
> w_pred <- rbinom(
+   n_simulations,
+   size = sample_size,
+   prob = post_samples
+ )
> 
> tibble(w_pred) %>%
+   ggplot(aes(x = w_pred)) +
+   geom_histogram(bins = 18) +
+   xlab("number of predicted water samples") +
+   ylab("Frequency") +
+   labs(title = "Predictive posterior distribution")
> 
> 
> # 3. Use the posterior predictive distribution from 2 to calculate the probabil-
> # ity of 3 or more water samples in the next 5 tosses.
> 
> sum(w_pred >= 3) / n_simulations
[1] 0.1863
> # [1] 0.1813
> 
> # 4-OPTIONAL. This problem is an optional challenge for people who are
> # taking the course for a second or third time. Suppose you observe W = 5
> # water points, but you forgot to write down how many times the globe was
> # tossed, so you don’t know the number of land points L. Assume that p = 0.7
> # and compute the posterior distribution of the number of tosses N. Hint: Use
> # the binomial distribution.
> 
> make_n_grid <- function(W, N_max) {
+   seq(from = W, to = N_max, length.out = (N_max - W + 1))
+ }
> 
> grid_approximation_tosses <- function(W, p_W, N_max) {
+   n_grid <- make_n_grid(W, N_max)
+   likelihood_w_given_n <- dbinom(W, n_grid, p_W)
+   unstd_post <- likelihood_w_given_n
+   posterior <- unstd_post / sum(unstd_post)
+   tibble(n = n_grid, post = round(posterior,3))
+ }
> 
> 
> N_max <- 30
> W <- 5
> p_W <- 0.7
> 
> model <- grid_approximation_tosses(W, p_W, N_max)
> model
# A tibble: 26 × 2
       n  post
   <dbl> <dbl>
 1     5 0.118
 2     6 0.212
 3     7 0.222
 4     8 0.178
 5     9 0.12 
 6    10 0.072
 7    11 0.04 
 8    12 0.02 
 9    13 0.01 
10    14 0.005
# … with 16 more rows
> 
> 
> model %>%
+   ggplot(aes(x = n, y = post)) +
+   geom_line() + geom_point() +
+   xlab("N tosses") +
+   ylab("posterior probability")
> 
> n_simulations <- 1e4
> n_grid <- make_n_grid(W, N_max)
> post_samples <- sample(
+    n_grid,
+    size = n_simulations,
+    replace = TRUE,
+     prob = model$post
+ )
> hpdi <- HPDI(post_samples)
> hpdi
|0.89 0.89| 
    5    10 
> 
> 
> 
> tibble(post_samples) %>%
+   ggplot(aes(x = post_samples)) +
+   geom_bar(aes(fill=sapply(post_samples, function(x) hpdi[1] <= x && x <= hpdi[2]))) +
+   xlab("number of predicted tosses") +
+   ylab("Frequency") +
+   labs(title = "Predictive posterior distribution of N tosses given W=5, pW = 0.7", subtitle="89% HPDI in blue") +
+   theme(legend.position="none")
> 
> 
> ### Testing
> # To test the model, we will assume a longer tossing run, with $W=50$ and a $N_{max} = 100$:
> 
> N_max <- 100
> W <- 50
> p_W <- 0.7
> 
> model <- grid_approximation_tosses(W, p_W, N_max)
> model
# A tibble: 51 × 2
       n  post
   <dbl> <dbl>
 1    50 0    
 2    51 0    
 3    52 0    
 4    53 0    
 5    54 0    
 6    55 0    
 7    56 0    
 8    57 0.001
 9    58 0.002
10    59 0.003
# … with 41 more rows
> 
> model %>%
+   ggplot(aes(x = n, y = post)) +
+   geom_line() + geom_point() +
+   xlab("N tosses") +
+   ylab("posterior probability")
> 
> n_simulations <- 1e4
> n_grid <- make_n_grid(W, N_max)
> post_samples <- sample(
+    n_grid,
+    size = n_simulations,
+    replace = TRUE,
+     prob = model$post
+ )
> 
> hpdi <- HPDI(post_samples)
> hpdi
|0.89 0.89| 
   63    80 
> 
> tibble(post_samples) %>%
+   ggplot(aes(x = post_samples)) +
+   geom_bar(aes(fill=sapply(post_samples, function(x) hpdi[1] <= x && x <= hpdi[2]))) +
+   xlab("number of predicted tosses") +
+   ylab("Frequency") +
+   labs(title = "Predictive posterior distribution of N tosses given W=50, pW = 0.7", subtitle="89% HPDI in blue") +
+   theme(legend.position="none")
> 
> 
> # By changing $p_W$ for a value lower than $0.5$, say $p_W = 0.3$, the likelihood of longer tossing runs increases:
> 
> N_max <- 100
> W <- 50
> p_W <- 0.3
> 
> model <- grid_approximation_tosses(W, p_W, N_max)
> model
# A tibble: 51 × 2
       n  post
   <dbl> <dbl>
 1    50     0
 2    51     0
 3    52     0
 4    53     0
 5    54     0
 6    55     0
 7    56     0
 8    57     0
 9    58     0
10    59     0
# … with 41 more rows
> 
> model %>%
+   ggplot(aes(x = n, y = post)) +
+   geom_line() + geom_point() +
+   xlab("N tosses") +
+   ylab("posterior probability")
> 
> n_simulations <- 1e4
> n_grid <- make_n_grid(W, N_max)
> post_samples <- sample(
+    n_grid,
+    size = n_simulations,
+    replace = TRUE,
+     prob = model$post
+ )
> hpdi <- HPDI(post_samples)
> hpdi
|0.89 0.89| 
   95   100 
> 
> tibble(post_samples) %>%
+   ggplot(aes(x = post_samples)) +
+   geom_bar(aes(fill=sapply(post_samples, function(x) hpdi[1] <= x && x <= hpdi[2]))) +
+   xlab("number of predicted tosses") +
+   ylab("Frequency") +
+   labs(title = "Predictive posterior distribution of N tosses given W=50, pW = 0.3", subtitle="89% HPDI in blue") +
+   theme(legend.position="none")
> 
> proc.time()
  usuário   sistema decorrido 
    3.593     0.101     4.221 
